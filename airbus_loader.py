import json, os, random, math
from collections import defaultdict

import torch
from torch._C import dtype
from torch.utils.data import Dataset
import torchvision.transforms as T

import numpy as np
import pandas as pd
import PIL
from skimage.transform import resize as imresize
import pycocotools.mask as mask_utils
from random import shuffle


class AirbusDataset(Dataset):
    def __init__(self, im_dir, label_path, 
                 input_im_size=(768, 768), train_im_size=(128, 128), min_objects_per_image=3, max_objects_per_image=8):
        super(Dataset, self).__init__()

        self.im_dir = im_dir
        self.input_im_size = input_im_size
        self.train_im_size = train_im_size
        self.min_objects_per_image = min_objects_per_image
        self.max_objects_per_image = max_objects_per_image

        self.labels = self.generate_labels(label_path)


    def generate_labels(self, label_path):
        labels = pd.read_csv(label_path)
        num_objects = labels.pivot_table(index=['ImageId'], aggfunc='size')
        valid_images = num_objects[(self.min_objects_per_image < num_objects) & 
                              (num_objects < self.max_objects_per_image)].keys()
        valid_labels = labels[labels['ImageId'].isin(valid_images)].reset_index(drop=True)
        valid_labels['BoundingBox'] = valid_labels['EncodedPixels'].apply(self.rle_to_bbox)
        valid_labels['ObjectClass'] = valid_labels[['ImageId', 'BoundingBox']].apply(self.label_object, axis=1)
        return valid_labels

    def rle_to_bbox(self, mask_rle):
        """Decodes run length encoded image mask"""
        s = mask_rle.split()
        starts, lengths = [np.asarray(x, dtype=int)
                          for x in (s[0:][::2], s[1:][::2])]
        starts -= 1
        ends = starts + lengths
        img = np.zeros(np.prod(self.input_im_size), dtype=np.uint8)
        for lo, hi in zip(starts, ends):
            img[lo:hi] = 1
        img = img.reshape(self.input_im_size).T
        mask_pixels = np.where(img == 1)
        x_range = [np.min(mask_pixels[1]), np.max(mask_pixels[1])]
        y_range = [np.min(mask_pixels[0]), np.max(mask_pixels[0])]
        x0 = x_range[0] / self.input_im_size[1]
        y0 = y_range[0] / self.input_im_size[0]
        width = (x_range[1] - x_range[0]) / self.input_im_size[1]
        height = (y_range[1] - y_range[0]) / self.input_im_size[0]

        return (x0, y0, width, height)

    def label_object(self, label_data):
        im_name = label_data[0]
        bbox = label_data[1]
        im_path = os.path.join(self.im_dir, im_name)
        # We can split ships into different object class based on size or color,
        # for now, all ships are class 1
        return 1


    def show_bbxs(self, image_id, line_width=2):
        im_path = os.path.join(self.im_dir, image_id)
        im = np.array(PIL.Image.open(im_path).convert('RGB'))
        im_w, im_h = im.shape[:2]
        bbxs = self.labels[self.labels['ImageId'] == image_id]['BoundingBox']
        for bbx in bbxs:
            x0 = int(bbx[0] * im_w)
            x1 = int(x0 + bbx[2] * im_w)
            y0 = int(bbx[1] * im_h)
            y1 = int(y0 + bbx[3] * im_h)
            im[y0: y1, x0: x0 + line_width] = [255, 0, 0]
            im[y0: y1, x1 - line_width: x1] = [255, 0, 0]
            im[y0: y0 + line_width, x0: x1] = [255, 0, 0]
            im[y1 - line_width: y1, x0: x1] = [255, 0, 0]
        return PIL.Image.fromarray(im)


# Example of data generated by cocostuff_loader.py
'''
real_images.shape
torch.Size([48, 3, 128, 128])

label.shape
torch.Size([48, 8])
label[0]
tensor([ 96, 102, 157, 163, 169, 171, 172, 176])

bbox.shape
torch.Size([48, 8, 4])
bbox[0]
tensor([[0.0000, 0.4042, 0.9047, 0.2458],
        [0.1469, 0.1750, 0.7016, 0.3312],
        [0.3281, 0.0000, 0.6719, 0.5437],
        [0.0437, 0.8187, 0.1953, 0.1812],
        [0.0000, 0.0000, 0.9766, 0.6083],
        [0.0000, 0.3187, 1.0000, 0.6813],
        [0.1156, 0.1000, 0.8844, 0.9000],
        [0.0000, 0.6375, 1.0000, 0.3625]], dtype=torch.float64)
'''

label_path = '/data/airbus/train_ship_segmentations_v2.csv'
im_dir = '/data/airbus/images'
ab = AirbusDataset(im_dir, label_path)
labeled_im = ab.show_bbxs('00113a75c.jpg')
labeled_im.show()
